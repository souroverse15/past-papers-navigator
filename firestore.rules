rules_version = '2';
service cloud.firestore {
  database: {
    name: '(default)';
    
    match /documents {
      // Helper functions
      function isAuthenticated() {
        return request.auth != null;
      }
      
      function isAdmin() {
        return request.auth != null && 
               exists(/databases/$(database)/documents/users/$(request.auth.token.email)) &&
               get(/databases/$(database)/documents/users/$(request.auth.token.email)).data.role == 'Admin';
      }
      
      function isUserBanned(email) {
        return exists(/databases/$(database)/documents/users/$(email)) &&
               get(/databases/$(database)/documents/users/$(email)).data.isBanned == true;
      }
      
      function isOwner(email) {
        return request.auth != null && request.auth.token.email == email;
      }
      
      // User documents - core user management
      match /users/{email} {
        // Users can read their own data, admins can read all
        allow read: if isAuthenticated() && 
                       !isUserBanned(request.auth.token.email) && 
                       (isOwner(email) || isAdmin());
        
        // Users can create/update their own document (excluding admin fields)
        allow create, update: if isAuthenticated() && 
                                 isOwner(email) &&
                                 !isUserBanned(request.auth.token.email) &&
                                 (!request.resource.data.diff(resource.data).affectedKeys()
                                   .hasAny(['role', 'isBanned', 'bannedAt', 'unbannedAt']));
        
        // Only admins can update roles, ban status, or delete users
        allow update, delete: if isAdmin();
      }
      
      // Mock exams - user's practice exam data
      match /mockExams/{examId} {
        // Users can read their own mock exams, admins can read all
        allow read: if isAuthenticated() && 
                       !isUserBanned(request.auth.token.email) &&
                       (resource.data.userEmail == request.auth.token.email || isAdmin());
        
        // Users can create mock exams for themselves
        allow create: if isAuthenticated() && 
                         !isUserBanned(request.auth.token.email) &&
                         request.resource.data.userEmail == request.auth.token.email;
        
        // Users can update their own mock exams
        allow update: if isAuthenticated() && 
                         !isUserBanned(request.auth.token.email) &&
                         resource.data.userEmail == request.auth.token.email;
        
        // Only admins can delete mock exams
        allow delete: if isAdmin();
      }
      
      // User goals - personal study goals
      match /userGoals/{goalId} {
        // Users can read their own goals, admins can read all
        allow read: if isAuthenticated() && 
                       !isUserBanned(request.auth.token.email) &&
                       (resource.data.userEmail == request.auth.token.email || isAdmin());
        
        // Users can create goals for themselves
        allow create: if isAuthenticated() && 
                         !isUserBanned(request.auth.token.email) &&
                         request.resource.data.userEmail == request.auth.token.email;
        
        // Users can update their own goals
        allow update: if isAuthenticated() && 
                         !isUserBanned(request.auth.token.email) &&
                         resource.data.userEmail == request.auth.token.email;
        
        // Users can delete their own goals
        allow delete: if isAuthenticated() && 
                         !isUserBanned(request.auth.token.email) &&
                         resource.data.userEmail == request.auth.token.email;
      }
      
      // Admin-only collections
      match /adminData/{document=**} {
        allow read, write: if isAdmin();
      }
      
      // System settings - admin only
      match /settings/{document=**} {
        allow read: if isAuthenticated() && !isUserBanned(request.auth.token.email);
        allow write: if isAdmin();
      }
      
      // Default rule - deny all other access
      match /{document=**} {
        allow read, write: if false;
      }
    }
  }
}